===== Global Symbol Table =====
putchar	int(int)
getchar	int(void)
x	int(void,char)
lmao	double(char,int,void,double,int)
main	int(char,int,int)
expressions	int(void)
statements	int(void)
oi	int(int,int)
huehue	int(int)

===== Function x Symbol Table =====
return	int
a	int
b	int
c	int

===== Function main Symbol Table =====
return	int
x	char	param
y	int	param
z	int	param
a	int
b	int
c	int
d	int
e	int

===== Function expressions Symbol Table =====
return	int
variable	char

===== Function statements Symbol Table =====
return	int

===== Function oi Symbol Table =====
return	int
tudo	int	param
bem	int	param
a	char
b	char
c	char
d	double
e	double
f	double

===== Function huehue Symbol Table =====
return	int
x	int	param
a	char
r	char

Program
..FuncDefinition
....Int
....Id(x)
....ParamList
......ParamDeclaration
........Void
......ParamDeclaration
........Char
....FuncBody
......Declaration
........Int
........Id(a)
......Declaration
........Int
........Id(b)
......Declaration
........Int
........Id(c)
......Store
........Id(d)
........IntLit(2)
......Store
........Id(a)
........ChrLit('a')
......Declaration
........Int
........Id(Ð'Þ)
........Ne
..........Id(b2)
..........Id(x)
..FuncDeclaration
....Double
....Id(lmao)
....ParamList
......ParamDeclaration
........Char
........Id(in)
......ParamDeclaration
........Int
......ParamDeclaration
........Void
......ParamDeclaration
........Double
......ParamDeclaration
........Int
..FuncDefinition
....Int
....Id(main)
....ParamList
......ParamDeclaration
........Char
........Id(x)
......ParamDeclaration
........Int
........Id(y)
......ParamDeclaration
........Int
........Id(z)
....FuncBody
......Declaration
........Int
........Id(ð0Þ)
........IntLit(1)
......Declaration
........Int
........Id( 0Þ)
........IntLit(2)
......Declaration
........Int
........Id(P0Þ)
......Declaration
........Int
........Id(a)
......Declaration
........Int
........Id(b)
......Declaration
........Int
........Id(c)
......Declaration
........Int
........Id(d)
......Declaration
........Int
........Id(e)
......If
........Or
..........And
............Gt
..............Id(x)
..............Id(y)
............Gt
..............Id(z)
..............Id(y)
..........Ne
............Id(z)
............Id(x)
........While
..........IntLit(1)
..........Return
............IntLit(1)
........Return
..........IntLit(0)
..FuncDefinition
....Int
....Id(expressions)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......Declaration
........Char
........Id(variable)
........IntLit(1)
......Store
........Id(variable)
........Add
..........Id(variable)
..........IntLit(2)
......Store
........Id(variable)
........Sub
..........Id(variable)
..........IntLit(2)
......Eq
........Id(variable)
........IntLit(2)
......Gt
........Id(variable)
........IntLit(2)
......Lt
........Id(variable)
........IntLit(2)
......Ge
........Id(variable)
........IntLit(2)
......Le
........Id(variable)
........IntLit(2)
......BitWiseOr
........Id(variable)
........IntLit(2)
......BitWiseAnd
........Id(variable)
........IntLit(2)
......Ne
........Id(variable)
........IntLit(2)
......And
........Id(variable)
........IntLit(2)
......Or
........Id(variable)
........IntLit(2)
......BitWiseXor
........Id(variable)
........IntLit(2)
......Store
........Id(variable)
........Mod
..........Id(variable)
..........IntLit(2)
......Store
........Id(variable)
........Mul
..........Id(variable)
..........IntLit(2)
......Store
........Id(variable)
........Div
..........Id(variable)
..........IntLit(2)
......Not
........Id(variable)
......Plus
........Id(variable)
......Minus
........Id(variable)
......Store
........Plus
..........Id(variable)
........IntLit(2)
......Store
........Id(i)
........Store
..........BitWiseXor
............Not
..............Id(i)
............IntLit(1)
..........BitWiseOr
............Add
..............Id(a)
..............Id(b)
............Mod
..............Id(c)
..............Id(d)
......Store
........Id(a)
........Id(b)
..FuncDefinition
....Int
....Id(statements)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......While
........IntLit(1)
........If
..........Id(x)
..........If
............Id(x)
............StatList
..............Call
................Id(printf)
................Id(x)
..............Return
................IntLit(1)
............If
..............IntLit(1)
..............Call
................Id(printf)
................Id(x)
..............Call
................Id(printf)
................Id(x)
..........While
............IntLit(1)
............Return
..............IntLit(0)
......If
........And
..........Eq
............Id(x)
............IntLit(1)
..........Ne
............Id(x)
............IntLit(1)
........Return
..........IntLit(1)
........Null
......If
........Not
..........Id(x)
........Call
..........Id(printf)
..........ChrLit('o')
........If
..........Comma
............Id(oi)
............Id(wk)
..........Call
............Id(gets)
..........Null
......If
........Id(a)
........Id(i)
........Null
..FuncDefinition
....Int
....Id(oi)
....ParamList
......ParamDeclaration
........Int
........Id(tudo)
......ParamDeclaration
........Int
........Id(bem)
....FuncBody
......Declaration
........Char
........Id(a)
......Declaration
........Char
........Id(b)
......Declaration
........Char
........Id(c)
........ChrLit('d')
......Declaration
........Double
........Id(d)
......Declaration
........Double
........Id(e)
......Declaration
........Double
........Id(f)
......Store
........Id(e)
........IntLit(4)
......Store
........Id(f)
........Add
..........Id(d)
..........Id(e)
..FuncDefinition
....Int
....Id(huehue)
....ParamList
......ParamDeclaration
........Int
........Id(x)
....FuncBody
......Declaration
........Char
........Id(a)
........Id(b)
......Declaration
........Char
........Id(r)
........Sub
..........Id(a)
..........Id(b)
......Call
........Id(putchar)
........Store
..........Id(x)
..........Id(a)
........Add
..........Id(a)
..........Id(v)
........Sub
..........Id(c)
..........Id(d)
........Not
..........Id(b)
........Plus
..........Id(a)
........Minus
..........Id(b)
